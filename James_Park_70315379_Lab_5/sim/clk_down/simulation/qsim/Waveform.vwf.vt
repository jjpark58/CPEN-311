// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2023 21:05:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          clk_down
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clk_down_vlg_vec_tst();
// constants                                           
// general purpose registers
reg inclk;
reg [31:0] indata;
reg outclk;
// wires                                               
wire [31:0] outdata;

// assign statements (if any)                          
clk_down i1 (
// port map - connection between master ports and signals/registers   
	.inclk(inclk),
	.indata(indata),
	.outclk(outclk),
	.outdata(outdata)
);
initial 
begin 
#1000000 $finish;
end 

// inclk
initial
begin
	inclk = 1'b1;
	inclk = #10000 1'b0;
	# 10000;
	repeat(48)
	begin
		inclk = 1'b1;
		inclk = #10000 1'b0;
		# 10000;
	end
	inclk = 1'b1;
	inclk = #10000 1'b0;
end 

// outclk
initial
begin
	repeat(8)
	begin
		outclk = 1'b0;
		outclk = #57000 1'b1;
		# 57000;
	end
	outclk = 1'b0;
	outclk = #57000 1'b1;
end 

// indata[0]
initial
begin
	indata[0] = 1'b1;
	indata[0] = #20000 1'b0;
	indata[0] = #100000 1'b1;
	indata[0] = #40000 1'b0;
	indata[0] = #20000 1'b1;
	indata[0] = #20000 1'b0;
	indata[0] = #40000 1'b1;
	indata[0] = #20000 1'b0;
	indata[0] = #40000 1'b1;
	indata[0] = #20000 1'b0;
	indata[0] = #20000 1'b1;
	indata[0] = #40000 1'b0;
	indata[0] = #40000 1'b1;
	indata[0] = #40000 1'b0;
	indata[0] = #40000 1'b1;
	indata[0] = #40000 1'b0;
	indata[0] = #40000 1'b1;
	indata[0] = #100000 1'b0;
	indata[0] = #80000 1'b1;
	indata[0] = #20000 1'b0;
	indata[0] = #20000 1'b1;
	indata[0] = #40000 1'b0;
	indata[0] = #60000 1'b1;
	indata[0] = #20000 1'b0;
	indata[0] = #60000 1'b1;
end 

// indata[1]
initial
begin
	indata[1] = 1'b0;
	indata[1] = #100000 1'b1;
	indata[1] = #20000 1'b0;
	indata[1] = #40000 1'b1;
	indata[1] = #20000 1'b0;
	indata[1] = #20000 1'b1;
	indata[1] = #20000 1'b0;
	indata[1] = #60000 1'b1;
	indata[1] = #40000 1'b0;
	indata[1] = #40000 1'b1;
	indata[1] = #20000 1'b0;
	indata[1] = #80000 1'b1;
	indata[1] = #40000 1'b0;
	indata[1] = #120000 1'b1;
	indata[1] = #80000 1'b0;
	indata[1] = #20000 1'b1;
	indata[1] = #40000 1'b0;
	indata[1] = #60000 1'b1;
	indata[1] = #20000 1'b0;
	indata[1] = #20000 1'b1;
	indata[1] = #20000 1'b0;
	indata[1] = #40000 1'b1;
	indata[1] = #20000 1'b0;
end 

// indata[2]
initial
begin
	indata[2] = 1'b1;
	indata[2] = #40000 1'b0;
	indata[2] = #20000 1'b1;
	indata[2] = #80000 1'b0;
	indata[2] = #20000 1'b1;
	indata[2] = #80000 1'b0;
	indata[2] = #60000 1'b1;
	indata[2] = #140000 1'b0;
	indata[2] = #20000 1'b1;
	indata[2] = #20000 1'b0;
	indata[2] = #20000 1'b1;
	indata[2] = #20000 1'b0;
	indata[2] = #20000 1'b1;
	indata[2] = #60000 1'b0;
	indata[2] = #40000 1'b1;
	indata[2] = #20000 1'b0;
	indata[2] = #60000 1'b1;
	indata[2] = #40000 1'b0;
	indata[2] = #60000 1'b1;
	indata[2] = #80000 1'b0;
end 

// indata[3]
initial
begin
	indata[3] = 1'b0;
	indata[3] = #20000 1'b1;
	indata[3] = #40000 1'b0;
	indata[3] = #60000 1'b1;
	indata[3] = #80000 1'b0;
	indata[3] = #20000 1'b1;
	indata[3] = #40000 1'b0;
	indata[3] = #60000 1'b1;
	indata[3] = #20000 1'b0;
	indata[3] = #20000 1'b1;
	indata[3] = #20000 1'b0;
	indata[3] = #20000 1'b1;
	indata[3] = #40000 1'b0;
	indata[3] = #40000 1'b1;
	indata[3] = #60000 1'b0;
	indata[3] = #40000 1'b1;
	indata[3] = #20000 1'b0;
	indata[3] = #40000 1'b1;
	indata[3] = #20000 1'b0;
	indata[3] = #40000 1'b1;
	indata[3] = #60000 1'b0;
	indata[3] = #20000 1'b1;
	indata[3] = #60000 1'b0;
	indata[3] = #40000 1'b1;
end 

// indata[4]
initial
begin
	indata[4] = 1'b1;
	indata[4] = #80000 1'b0;
	indata[4] = #100000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #40000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #60000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #80000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #40000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #60000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #60000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #40000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #20000 1'b1;
	indata[4] = #20000 1'b0;
	indata[4] = #20000 1'b1;
end 

// indata[5]
initial
begin
	indata[5] = 1'b1;
	indata[5] = #20000 1'b0;
	indata[5] = #60000 1'b1;
	indata[5] = #20000 1'b0;
	indata[5] = #100000 1'b1;
	indata[5] = #40000 1'b0;
	indata[5] = #40000 1'b1;
	indata[5] = #80000 1'b0;
	indata[5] = #20000 1'b1;
	indata[5] = #20000 1'b0;
	indata[5] = #140000 1'b1;
	indata[5] = #40000 1'b0;
	indata[5] = #40000 1'b1;
	indata[5] = #40000 1'b0;
	indata[5] = #100000 1'b1;
	indata[5] = #20000 1'b0;
	indata[5] = #160000 1'b1;
	indata[5] = #20000 1'b0;
end 

// indata[6]
initial
begin
	indata[6] = 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #40000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #40000 1'b0;
	indata[6] = #40000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #100000 1'b0;
	indata[6] = #120000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #40000 1'b1;
	indata[6] = #20000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #60000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #40000 1'b0;
	indata[6] = #20000 1'b1;
	indata[6] = #80000 1'b0;
	indata[6] = #20000 1'b1;
end 

// indata[7]
initial
begin
	indata[7] = 1'b0;
	indata[7] = #100000 1'b1;
	indata[7] = #40000 1'b0;
	indata[7] = #20000 1'b1;
	indata[7] = #20000 1'b0;
	indata[7] = #20000 1'b1;
	indata[7] = #40000 1'b0;
	indata[7] = #40000 1'b1;
	indata[7] = #40000 1'b0;
	indata[7] = #60000 1'b1;
	indata[7] = #40000 1'b0;
	indata[7] = #60000 1'b1;
	indata[7] = #20000 1'b0;
	indata[7] = #20000 1'b1;
	indata[7] = #40000 1'b0;
	indata[7] = #20000 1'b1;
	indata[7] = #20000 1'b0;
	indata[7] = #120000 1'b1;
	indata[7] = #20000 1'b0;
	indata[7] = #60000 1'b1;
	indata[7] = #40000 1'b0;
	indata[7] = #40000 1'b1;
	indata[7] = #20000 1'b0;
	indata[7] = #20000 1'b1;
	indata[7] = #20000 1'b0;
	indata[7] = #20000 1'b1;
	indata[7] = #20000 1'b0;
end 
endmodule


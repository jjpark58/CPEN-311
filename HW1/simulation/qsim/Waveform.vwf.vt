// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2023 00:01:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          HW1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HW1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg async_sig;
reg outclk;
// wires                                               
wire out_sync_sig;

// assign statements (if any)                          
HW1 i1 (
// port map - connection between master ports and signals/registers   
	.async_sig(async_sig),
	.out_sync_sig(out_sync_sig),
	.outclk(outclk)
);
initial 
begin 
#1000000 $finish;
end 

// async_sig
initial
begin
	async_sig = 1'b0;
	async_sig = #10000 1'b1;
	async_sig = #10000 1'b0;
	async_sig = #150000 1'b1;
	async_sig = #10000 1'b0;
	async_sig = #150000 1'b1;
	async_sig = #10000 1'b0;
	async_sig = #70000 1'b1;
	async_sig = #10000 1'b0;
	async_sig = #60000 1'b1;
	async_sig = #10000 1'b0;
	async_sig = #240000 1'b1;
	async_sig = #10000 1'b0;
	async_sig = #150000 1'b1;
	async_sig = #10000 1'b0;
end 

// outclk
initial
begin
	repeat(7)
	begin
		outclk = 1'b0;
		outclk = #20000 1'b1;
		# 20000;
	end
	outclk = 1'b0;
	outclk = #20000 1'b1;
	outclk = #20000 1'b0;
	outclk = #20000 1'b1;
	# 20000;
	repeat(16)
	begin
		outclk = 1'b0;
		outclk = #20000 1'b1;
		# 20000;
	end
end 
endmodule

